{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"Copy of 1.life-satisfaction","provenance":[{"file_id":"16aQLRybBHBD6imEmxqB1PXegj2Dkm_0V","timestamp":1599169780684}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"lOJJFeFdhh-r","colab_type":"text"},"source":["Code for CISC 3440 8/31\n","\n","Heavily based on the [code](https://github.com/ageron/handson-ml) accompanying _Hands On Machine Learning with Scikit-Learn, Keras & TensorFlow_\n","\n","Select \"Copy to Drive\" above to make your own editable copy of this notebook. Find the cells below that you can edit to experiment with improving the model. Record your results in the Google Sheet linked from the course schedule."]},{"cell_type":"code","metadata":{"id":"RGfP4vOJYkt9","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599169648643,"user_tz":240,"elapsed":223,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}}},"source":["# To support both python 2 and python 3\n","from __future__ import division, print_function, unicode_literals\n","\n","# Common imports\n","import numpy as np\n","import os\n","\n","# to make this notebook's output stable across runs\n","np.random.seed(42)"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"id":"_uAp_HMFYkuB","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599169648793,"user_tz":240,"elapsed":368,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}}},"source":["# To plot pretty figures\n","%matplotlib inline\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","mpl.rc('axes', labelsize=14)\n","mpl.rc('xtick', labelsize=12)\n","mpl.rc('ytick', labelsize=12)\n","\n","# Where to save the figures\n","PROJECT_ROOT_DIR = \".\"\n","CHAPTER_ID = \"fundamentals\"\n","\n","def save_fig(fig_id, tight_layout=True):\n","    path = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID, fig_id + \".png\")\n","    print(\"Saving figure\", fig_id)\n","    if tight_layout:\n","        plt.tight_layout()\n","    plt.savefig(path, format='png', dpi=300)\n","\n","# Ignore useless warnings (see SciPy issue #5998)\n","import warnings\n","warnings.filterwarnings(action=\"ignore\", message=\"^internal gelsd\")"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"id":"uFdT5uEqYkuD","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599169648794,"user_tz":240,"elapsed":365,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}}},"source":["# Function to merge OECD life satisfaction data and IMF GDP per capita data\n","def prepare_country_stats(oecd_bli, gdp_per_capita, predictor, label):\n","    oecd_bli = oecd_bli[oecd_bli[\"INEQUALITY\"]==\"TOT\"]\n","    oecd_bli = oecd_bli.pivot(index=\"Country\", columns=\"Indicator\", values=\"Value\")\n","    gdp_per_capita.rename(columns={\"2015\": \"GDP per capita\"}, inplace=True)\n","    gdp_per_capita.set_index(\"Country\", inplace=True)\n","    full_country_stats = pd.merge(left=oecd_bli, right=gdp_per_capita,\n","                                  left_index=True, right_index=True)\n","    full_country_stats.sort_values(by=\"GDP per capita\", inplace=True)\n","    remove_indices = [0, 1, 6, 8, 33, 34, 35]\n","    keep_indices = list(set(range(36)) - set(remove_indices))\n","    return full_country_stats[predictor + [label]].iloc[keep_indices]\n"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"f74kgWrrYkuG","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599169648967,"user_tz":240,"elapsed":533,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}}},"source":["# Code example\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","#import sklearn.linear_model\n","import sklearn.neighbors\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","oecd_bli_url = \"https://raw.githubusercontent.com/cisc3440/datasets/master/OECD_BetterLifeIndex.csv\"\n","gdp_per_capita_url = \"https://raw.githubusercontent.com/cisc3440/datasets/master/IMF_GDP_per_capita.xls\"\n","#water_quality_url = \"???\"\n","#homicide_rate_url = \"???\"\n","\n","# Load the data\n","oecd_bli = pd.read_csv(oecd_bli_url, thousands=',')\n","gdp_per_capita = pd.read_table(gdp_per_capita_url ,thousands=',',delimiter='\\t',\n","                             encoding='latin1', na_values=\"n/a\")\n","#water_quality = pd.read_table(water_quality_url, thousands=',',delimiter='\\t', encoding='latin1', na_values=\"n/a\")"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"fDbBmVKxYkuI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"status":"ok","timestamp":1599169648968,"user_tz":240,"elapsed":529,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}},"outputId":"9d277f53-b779-43ff-a84f-e2fc021ce775"},"source":["print(oecd_bli.Indicator.value_counts())"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Student skills                                       200\n","Self-reported health                                 182\n","Life satisfaction                                    168\n","Quality of support network                           168\n","Labour market insecurity                             162\n","Homicide rate                                        123\n","Employment rate                                      123\n","Feeling safe walking alone at night                  123\n","Water quality                                        123\n","Life expectancy                                      123\n","Educational attainment                               120\n","Years in education                                   120\n","Employees working very long hours                    117\n","Long-term unemployment rate                          117\n","Time devoted to leisure and personal care             69\n","Air pollution                                         41\n","Voter turnout                                         41\n","Stakeholder engagement for developing regulations     39\n","Housing expenditure                                   39\n","Rooms per person                                      38\n","Dwellings without basic facilities                    38\n","Personal earnings                                     36\n","Household net adjusted disposable income              30\n","Household net wealth                                  29\n","Name: Indicator, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LcpHy-nhYkuL","colab_type":"text"},"source":["Experiment below with adding predictors to the list to improve the model. For example,\n","\n","```predictor = [\"GDP per capita\", \"Homicide rate\" ]```\n","\n","You can find the indicators in the output of the cell above."]},{"cell_type":"code","metadata":{"id":"gctRcU2LYkuM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"executionInfo":{"status":"ok","timestamp":1599169648968,"user_tz":240,"elapsed":524,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}},"outputId":"465073a3-b301-4e8d-902c-62a7a173803b"},"source":["# Prepare the data\n","label = \"Life satisfaction\"\n","predictor = [\"GDP per capita\"]\n","country_stats = prepare_country_stats(oecd_bli, gdp_per_capita, predictor, label)\n","print(country_stats.head())\n","print(len(country_stats))"],"execution_count":33,"outputs":[{"output_type":"stream","text":["         GDP per capita  Life satisfaction\n","Country                                   \n","Brazil         8669.998                6.4\n","Mexico         9009.280                6.5\n","Russia         9054.914                5.8\n","Turkey         9437.372                5.5\n","Poland        12495.334                6.1\n","29\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YBUG1T_fYkuP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"ok","timestamp":1599169649370,"user_tz":240,"elapsed":921,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}},"outputId":"af5b9a9f-9b2c-4396-8f94-ac9227e86e53"},"source":["X = np.c_[country_stats[predictor]]\n","y = np.c_[country_stats[label]]\n","\n","# Visualize the data\n","country_stats.plot(kind='scatter', x=predictor[0], y=label)\n","plt.show()"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"sAqqvazXYkuS","colab_type":"text"},"source":["Instead of a linear model, experiment with k-Nearest Neighbors:\n","\n","```\n","import sklearn.neighbors\n","model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=3)\n","```"]},{"cell_type":"code","metadata":{"id":"Ni5K1ioXYkuT","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599169649370,"user_tz":240,"elapsed":916,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}}},"source":["# Select a linear model\n","#model = sklearn.linear_model.LinearRegression()\n","# Select a K-Neighbors model\n","model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=3)"],"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hjNPOiPqYkuV","colab_type":"text"},"source":["Put the cell below into a loop over all instances in X to implement Leave-One-Out Cross-Validation. \n","\n","[How to write a loop in Python](https://www.learnpython.org/en/Loops)\n","\n","How to loop over all indices in X: ```for test_idx in xrange(len(X)):```\n","\n","Instead of alerting when the error is greater than a standard deviation, evaluate the model with [RMSE](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html) (use `squared=False`) or [R^2](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.r2_score.html)"]},{"cell_type":"code","metadata":{"id":"LaQHQv-GYkuW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599169649370,"user_tz":240,"elapsed":911,"user":{"displayName":"Yehoshua S.","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi8lXE6bUl_0TcnqO4NoWnlz4J0Gza_xEKWw8yJ=s64","userId":"05463914661174493943"}},"outputId":"14085ec2-2ae7-4c32-9173-66f85ffcc70a"},"source":["#Loop cell\n","for test_idx in range(len(X)):\n","\n","  # Leave one out for testing\n","  test_idx = np.random.randint(0, len(X))\n","  train_idx = list(set(range(len(X))) - set([test_idx]))\n","  X_train = X[train_idx]\n","  X_test = X[test_idx]\n","  y_train = y[train_idx]\n","  y_test = y[test_idx]\n","\n","  country = country_stats.index[test_idx]\n","\n","  # Train the model\n","  model.fit(X_train, y_train)\n","\n","  # Evaluate the model\n","  prediction = model.predict([X_test])\n","  error = mean_squared_error(y_test, prediction, squared=False)\n","  print(country)\n","  print(prediction)\n","  print(y_test)\n","  print(error)\n"],"execution_count":36,"outputs":[{"output_type":"stream","text":["Lithuania\n","[[6.06666667]]\n","[5.9]\n","0.16666666666666607\n","France\n","[[7.13333333]]\n","[6.5]\n","0.6333333333333329\n","Iceland\n","[[7.06666667]]\n","[7.5]\n","0.43333333333333357\n","Korea\n","[[6.06666667]]\n","[5.9]\n","0.16666666666666696\n","Greece\n","[[5.93333333]]\n","[5.4]\n","0.5333333333333332\n","Slovak Republic\n","[[6.1]]\n","[6.2]\n","0.09999999999999964\n","Iceland\n","[[7.06666667]]\n","[7.5]\n","0.43333333333333357\n","Belgium\n","[[7.03333333]]\n","[6.9]\n","0.13333333333333375\n","Lithuania\n","[[6.06666667]]\n","[5.9]\n","0.16666666666666607\n","Austria\n","[[7.2]]\n","[7.1]\n","0.10000000000000053\n","New Zealand\n","[[6.86666667]]\n","[7.3]\n","0.4333333333333327\n","Finland\n","[[7.26666667]]\n","[7.6]\n","0.33333333333333304\n","Greece\n","[[5.93333333]]\n","[5.4]\n","0.5333333333333332\n","Greece\n","[[5.93333333]]\n","[5.4]\n","0.5333333333333332\n","Canada\n","[[7.1]]\n","[7.4]\n","0.2999999999999998\n","Belgium\n","[[7.03333333]]\n","[6.9]\n","0.13333333333333375\n","Turkey\n","[[6.23333333]]\n","[5.5]\n","0.7333333333333343\n","Slovak Republic\n","[[6.1]]\n","[6.2]\n","0.09999999999999964\n","Canada\n","[[7.1]]\n","[7.4]\n","0.2999999999999998\n","Russia\n","[[6.13333333]]\n","[5.8]\n","0.33333333333333304\n","Germany\n","[[7.3]]\n","[7.]\n","0.2999999999999998\n","Belgium\n","[[7.03333333]]\n","[6.9]\n","0.13333333333333375\n","Mexico\n","[[5.9]]\n","[6.5]\n","0.6000000000000005\n","Canada\n","[[7.1]]\n","[7.4]\n","0.2999999999999998\n","Portugal\n","[[5.66666667]]\n","[5.4]\n","0.2666666666666666\n","Latvia\n","[[6.06666667]]\n","[5.9]\n","0.16666666666666607\n","Mexico\n","[[5.9]]\n","[6.5]\n","0.6000000000000005\n","Sweden\n","[[7.13333333]]\n","[7.3]\n","0.16666666666666696\n","Belgium\n","[[7.03333333]]\n","[6.9]\n","0.13333333333333375\n"],"name":"stdout"}]}]}